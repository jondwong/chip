#!/usr/bin/env python
import re
import sys

PLACEHOLDER_MODIFIERS = {
    'lower': lambda x: x.lower(),
    'upper': lambda x: x.upper(),
    'capitalize': lambda x: x.capitalize()
}


def getTemplatePlaceholderTerms(fileData):
    chipMatches = re.findall(r'{{\s*([A-Za-z\.]+)\s*}}', fileData)
    chipParameters = set(chipMatches)
    return chipParameters


def processPlaceholders(placeholderTerms):
    placeholders = {}

    for placeholderTerm in placeholderTerms:
        modifiedPieces = placeholderTerm.split(".")
        basePlaceholder = None
        modifier = None
        if len(modifiedPieces) == 2:
            basePlaceholder, modifier = modifiedPieces
        else:
            basePlaceholder = placeholderTerm

        if basePlaceholder not in placeholders.keys():
            placeholders[basePlaceholder] = {
                "value": input("{}: ".format(basePlaceholder)),
                "modifiers": set([])
            }

        if modifier:
            placeholders[basePlaceholder]['modifiers'].add(modifier)

    return placeholders


def replaceTemplatePlaceholders(fileData, placeholders):
    for placeholder, placeholderInfo in placeholders.items():
        print(placeholderInfo)
        fileData = re.sub(
            r'{{{{\s*{}\s*}}}}'.format(placeholder), placeholderInfo['value'], fileData)
        for modifier in placeholderInfo['modifiers']:
            cleanModifier = modifier.lower()
            if cleanModifier in PLACEHOLDER_MODIFIERS.keys():
                fileData = re.sub(
                    r'{{{{\s*{}.{}\s*}}}}'.format(
                        placeholder,
                        modifier),
                    PLACEHOLDER_MODIFIERS[cleanModifier](
                        placeholderInfo['value']),
                    fileData)

    return fileData


def processTemplateLocation(path):
    template = None
    with open(path, 'r') as file:
        template = file.read()
    return template


def main():
    print("***********************************************************************")
    print("*                                                                     *")
    print("*                    CHIP - A FILE COOKIE CUTTER                      *")
    print("*                                                                     *")
    print("***********************************************************************")

    if len(sys.argv) != 2:
        print("Error: Path to template must be specified\n")
        return

    fileData = processTemplateLocation(sys.argv[1])
    fileName = input("Where should we put the file?: ")
    print("Template Values: \n")
    placeholderTerms = getTemplatePlaceholderTerms(fileData)
    placeholders = processPlaceholders(placeholderTerms)
    transformedFile = replaceTemplatePlaceholders(fileData, placeholders)

    with open('./{}'.format(fileName), 'w') as f:
        f.write(transformedFile)
    print("\nGenerated {}".format(fileName))


main()
